"""
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
""".

nil := ToList {}.
{"one", {2, nil}} := ToList {"one", 2}.
"""
        Bools Tests:
""".
false := Bools:Truthy {}.
false := Bools:Truthy 0.
false := Bools:Truthy false.
false := Bools:Truthy "".

true  := Bools:Truthy true.
true  := Bools:Truthy "true".
true  := Bools:Truthy 23.
true  := Bools:Truthy {false}.


true  := Bools:And {1, 2}.
true  := Bools:And {true, true}.

false := Bools:And {false, true}.
false := Bools:And {true,  false}.


true  := Bools:Or {"3", false}.
true  := Bools:Or {0, 1}.
false := Bools:Or {false, ""}.


true  := Bools:Xor {0, true}.
true  := Bools:Xor {true, false}.
false := Bools:Xor {true, true}.
false := Bools:Xor {0, 0}.

"""
        Lists Tests:
""".

L := ToList {1, two, "three"}.

1 := Lists:Head L.
{two, {"three", nil}} := Lists:Tail L.

{"three", {two, {1, nil}}} := Lists:Reverse L.
nil := Lists:Reverse nil.
{elm, nil} := Lists:Reverse {elm, nil}.

Double := [ @ * 2. ].
Nums := ToList {1,2,3}.

{2, {4, {6, nil}}} := Lists:Map {Double, Nums}.
nil := Lists:Map {Double, nil}.

StrConcat := [{Acc, Elem} := @. Acc + Elem.].
"123" := Lists:Foldl {StrConcat, "", ToList {"1", "2", "3"}}.
"321" := Lists:Foldr {StrConcat, "", ToList {"1", "2", "3"}}.

"" := Lists:Foldl {StrConcat, "", nil}.
"" := Lists:Foldr {StrConcat, "", nil}.

0 := Lists:Length nil.
1 := Lists:Length {one, nil}.
2 := Lists:Length {one, {two, nil}}.

nil := Lists:Range {10, 10}.
{10, {11, {12, nil}}} := Lists:Range {10, 13}.

first  := Lists:Nth {1, {first, nil}}.
second := Lists:Nth {2, {first, {second, nil}}}.

{1, nil} := Lists:Concat {nil, {1, nil}}.
{2, nil} := Lists:Concat {{2, nil}, nil}.
{1, {2, {3, {4, nil}}}}
    := Lists:Concat {ToList {1, 2}, ToList {3, 4}}.

true  := Lists:Any {[@ == 2.], ToList {1,2,3}}.
false := Lists:Any {[@ == 2.], ToList {1,3}}.

true  := Lists:Member {"str", ToList {one, 2, "str"}}.
false := Lists:Member {str,   ToList {one, 2, "Str"}}.

nil := Lists:Repeat {0, hello}.
{hello, {hello, {hello, nil}}} := Lists:Repeat {3, hello}.

"""
        Dicts Tests:
""".

D := ToList {{one, 1}, {two, 2}, {"three", three}}.
{ok, 1} := Dicts:Get {one, D}.
sorry   := Dicts:Get {four, D}.

true  := Dicts:Member {"three", D}.
false := Dicts:Member {four, D}.
false := Dicts:Member {2, D}.

true  := Dicts:Member {two,  Dicts:Remove {"three", D}}.
false := Dicts:Member {four, Dicts:Remove {two,     D}}.
false := Dicts:Member {one,  Dicts:Remove {one,     D}}.



Print "All library tests passed.\n".