"
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
".

#[] := nil.
{1, nil} := #[1].

#["one", 2] := #["one", 2].

#[] := #["hay" | E1 <- #[1,2], E2 <- #[]].
#[{1, one}, {1, two}] :=
    #[{N, M} | N <- #[1, 2],
               N < 2,
               M <- #[one, two]].



1 := Car #[1, two, "three"].
#[two, "three"] := Cdr #[1, two, "three"].


"string" := ToStr "string".
"{\"Hay\", hay, 3}" := ToStr {"Hay", hay, 3}.


yeah := case catch 100 / 0 of
  {no_error, _} -> nope.
  {error, _}    -> yeah.
end.

nope := case catch 100 / 2 of
  {no_error, _} -> nope.
  {error, _}    -> yeah.
end.


-3 := case -2 of
   -2 -> -3.
end.
-10 := -10.

yeah := 10 = 10.
yeah := 10 >= 10.
yeah := 10 <= 10.
nope := 10 > 10.
nope := 10 < 10.
yeah := 11 > 10.
yeah := 10 < 11.
nope :=  9 > 10.
nope := 10 < 9.
nope := 10 <= 9.
yeah := 10 >= 9.
nope := 10 = 11.

yeah := {23, {1}} <  {23, {1, 0}}.
nope := {23, {1}} >= {23, {1, 0}}.


yeah := #[1, #[2, #[3]], 4, 5] = #[1, #[2, #[3]], 4, 5].
nope := #[1, #[2, #[3]], 4, 5] = #[1, #[2, #[0]], 4, 5].
nope := #[1, #[2, #[3, 1]], 4, 5] = #[1, #[2, #[3]], 4, 5].

nope := {0,2,3, 4} > {1,2,3}.
yeah := {0,2, 3} < {1,2,3, 4}.

Str := "{Str}".

""     := Fmt "".
"test" := Fmt "test".

"{Str}"    := Fmt "{Str}".
"---{Str}" := Fmt "{Str|->8}".
"   {Str}" := Fmt "{Str| >8}".
"{Str}---" := Fmt "{Str|-<8}".
"{Str}   " := Fmt "{Str| <8}".
"{Str}"    := Fmt "{Str| <2}".
"{Str}"    := Fmt "{Str|!>2}".

N := 32.
"00032$" := Fmt "{N|0>5}$".

"
        Bools Tests:
".
nope := Bools:Truthy {}.
nope := Bools:Truthy 0.
nope := Bools:Truthy nope.
nope := Bools:Truthy "".

yeah  := Bools:Truthy yeah.
yeah  := Bools:Truthy "true".
yeah  := Bools:Truthy 23.
yeah  := Bools:Truthy {nope}.


yeah  := Bools:And {1, 2}.
yeah  := Bools:And {yeah, yeah}.

nope := Bools:And {nope, nope}.
nope := Bools:And {yeah, nope}.


yeah := Bools:Or {"3", nope}.
yeah := Bools:Or {0, 1}.
nope := Bools:Or {nope, ""}.


yeah := Bools:Xor {0, yeah}.
yeah := Bools:Xor {yeah, nope}.
nope := Bools:Xor {yeah, yeah}.
nope := Bools:Xor {0, 0}.


"
        Lists Tests:
".

"" := Lists:Joinwith {" -=- ", #[]}.
"1|3|9" := Lists:Joinwith {"|", #[1, 3, 9]}.
"1|3|9" := Lists:Joinwith {"|", #["1", "3", "9"]}.

"onetwo\"three\"" := Lists:Join #["one", "two", "\"three\""].

"#[]"  := Lists:ListToStr nil.
"#[1]" := Lists:ListToStr #[1].
"#[1, {hello}, 2]" := Lists:ListToStr #[1, {hello}, 2].
"#[1, \"hello\", 2]" := Lists:ListToStr #[1, "hello", 2].
"#[1, {\"\\thay!\"}, 2]" := Lists:ListToStr #[1, {"\thay!"}, 2].


L := #[1, two, "three"].

#["three", two, 1] := Lists:Reverse L.
#[]    := Lists:Reverse #[].
#[elm] := Lists:Reverse #[elm].

Double := [ @ * 2. ].
Nums := #[1,2,3].

#[2, 4, 6] := Lists:Map {Double, Nums}.
#[] := Lists:Map {Double, nil}.

StrConcat := [{Acc, Elem} := @. Acc + Elem.].
"123" := Lists:Foldl {StrConcat, "", #["1", "2", "3"]}.
"321" := Lists:Foldr {StrConcat, "", #["1", "2", "3"]}.

"" := Lists:Foldl {StrConcat, "", nil}.
"" := Lists:Foldr {StrConcat, "", nil}.

0 := Lists:Length nil.
1 := Lists:Length #[one].
2 := Lists:Length #[one, two].

nil := Lists:Range {10, 10}.
#[10, 11, 12] := Lists:Range {10, 13}.

first  := Lists:Nth {1, #[first]}.
second := Lists:Nth {2, #[first, second]}.

#[1] := Lists:Concat {#[ ], #[1]}.
#[2] := Lists:Concat {#[2], #[ ]}.
#[1, 2, 3, 4] := Lists:Concat {#[1, 2], #[3, 4]}.


yeah := Lists:Any {[@ = 2.], #[1, 2, 3]}.
nope := Lists:Any {[@ = 2.], #[1, 3]}.

yeah := Lists:All {[@ = 4.], #[4, 4, 4, 4]}.
yeah := Lists:All {[@ = 4.], #[]}.
nope := Lists:All {[@ = 4.], #[4, 4, 4, four, 4]}.


yeah := Lists:And #[].
yeah := Lists:And #[1, 2, 3].
yeah := Lists:And #[yeah].
nope := Lists:And #[1, 2, nope, 4].
nope := Lists:And #[0].

nope := Lists:Or #[].
nope := Lists:Or #[0, nope, nil, "", {}].
yeah := Lists:Or #[0, nope, nil, "", {}, "Hello"].
yeah := Lists:Or #[yeah, 1].


yeah := Lists:Member {"str", #[one, 2, "str"]}.
nope := Lists:Member {str,   #[one, 2, "Str"]}.

#[] := Lists:Repeat {0, hello}.
#[hello, hello, hello] := Lists:Repeat {3, hello}.

#[] := Lists:Remove #[hay].

Nums    := #[1, 2, 3].
Nums    := Lists:Remove {4, Nums}.
#[1, 3] := Lists:Remove {2, Nums}.

#[]     := Lists:Filter {[@=5.], Nums}.
#[]     := Lists:Filter {[@=5.], #[]}.
#[1, 2] := Lists:Filter {[@ <= 2.], Nums}.

#[] := Lists:Zip {#[], #[]}.
#[] := Lists:Zip {#[1,2,3], #[]}.
#[] := Lists:Zip {#[], #[1,2,3]}.
#[{1, one}, {2, two}] := Lists:Zip {#[1,2], #[one, two]}.
#[{1, one}] := Lists:Zip {#[1], #[one, two]}.
#[{1, one}] := Lists:Zip {#[1, 2], #[one]}.

Add := [{N1, N2} := @.
        N1 + N2.].

#[]  := Lists:Zipwith {Add, #[], #[]}.
#[]  := Lists:Zipwith {Add, #[1, 2], #[]}.
#[]  := Lists:Zipwith {Add, #[], #[1, 2, 4]}.
#[4] := Lists:Zipwith {Add, #[1, 2], #[3]}.
#[4, 5, 6] := Lists:Zipwith {Add, #[1, 2, 3], #[3, 3, 3]}.


#[]    := Lists:Take {0, Nums}.
#[one] := Lists:Take {1, #[one, two, three]}.
#[one, two, three] := Lists:Take {50, #[one, two, three]}.

#[1,2,3] := Lists:Drop {0, Nums}.
#[2,3]   := Lists:Drop {1, Nums}.
#[3]     := Lists:Drop {2, Nums}.
#[]      := Lists:Drop {3, Nums}.
#[]      := Lists:Drop {4, Nums}.

#[8]       := Lists:Takewhile {[@ > 3.], #[8, 2, 10, 3]}.
#[1, 2, 3] := Lists:Takewhile {[@ < 4.], #[1, 2, 3, 4, 5, 6]}.
#[]        := Lists:Takewhile {[@ != "hay".], #[]}.

#[]              := Lists:Dropwhile {[@ > 0.], #[1, 2, 3]}.
#[]              := Lists:Dropwhile {[@ > 0.], #[]}.
#[1, 2, 3, 4, 5] := Lists:Dropwhile {[@ > 4.], #[1, 2, 3, 4, 5]}.
#[2, 1]          := Lists:Dropwhile {[@ > 2.], #[4, 3, 2, 1]}.

{#["hay"], #["ey"]} := Lists:Separate {[@ = "hay".], #["hay", "ey"]}.
{#["hay"], #[]}     := Lists:Separate {[@ = "hay".], #["hay"]}.
{#[], #["ey"]}      := Lists:Separate {[@ = "hay".], #["ey"]}.

{#[], #[1, 2, 3]} := Lists:Partition_At {0, #[1, 2, 3]}.
{#[1], #[2, 3]}   := Lists:Partition_At {1, #[1, 2, 3]}.
{#[2, 1], #[3]}   := Lists:Partition_At {2, #[1, 2, 3]}.
{#[3, 2, 1], #[]} := Lists:Partition_At {3, #[1, 2, 3]}.
{#[3, 2, 1], #[]} := Lists:Partition_At {4, #[1, 2, 3]}.
{#[], #[]}        := Lists:Partition_At {2, #[]}.


{}          := Lists:ToTuple #[].
{one}       := Lists:ToTuple #[one].
{1, two, 3} := Lists:ToTuple #[1, two, 3].

Li := #[one, two, 333, "hay"].

#[]                := Lists:Slice {1, 1, Li}.
#[]                := Lists:Slice {2, 2, Li}.
#[one, two]        := Lists:Slice {1, 3, Li}.
#[two, 333, "hay"] := Lists:Slice {2, 5, Li}.
Li                 := Lists:Slice {1, 5, Li}.


3 := Lists:Max #[3].
3 := Lists:Max #[3, 3].
3 := Lists:Max #[1, 3, 2].

3 := Lists:Min #[3].
3 := Lists:Min #[3, 3].
1 := Lists:Min #[1, 3, 2].




"
        Dicts Tests:
".

D := #[{one, 1}, {two, 2}, {"three", three}].
{ok, 1} := Dicts:Get {one, D}.
sorry   := Dicts:Get {four, D}.

yeah := Dicts:Member {"three", D}.
nope := Dicts:Member {four, D}.
nope := Dicts:Member {2, D}.

yeah := Dicts:Member {two,  Dicts:Remove {"three", D}}.
nope := Dicts:Member {four, Dicts:Remove {two,     D}}.
nope := Dicts:Member {one,  Dicts:Remove {one,     D}}.

yeah := Dicts:Member {4, Dicts:Set {4, four, D}}.
{ok, four} := Dicts:Get {4, Dicts:Set {4, four, D}}.

Vals := Dicts:Values D.
Keys := Dicts:Keys D.
nope := Lists:Member {one, Vals}.
nope := Lists:Member {three, Keys}.
yeah := Lists:Member {"three", Keys}.
yeah := Lists:Member {2, Vals}.

3 := Lists:Length Vals.
3 := Lists:Length Keys.

Ag  := #[{peter, 23}, {dory, 91}].
Ag2 := #[{harry, 83}, {dory, 11}].
#[{dory, 11}, {harry, 83}, {peter, 23}] :=
  Dicts:Extend {Ag, Ag2}.

"
        Sort Tests:
".
#[] :=              Lists:Sort #[].
#["hay"] :=         Lists:Sort #["hay"].
#[1, 2, 3] :=       Lists:Sort #[1, 2, 3].
#[1, 2, 3] :=       Lists:Sort #[2, 3, 1].
#[1, 1, 3] :=       Lists:Sort #[1, 3, 1].
#["b", "h", "z"] := Lists:Sort #["h", "z", "b"].

#[] :=              Lists:ReverseSort #[].
#["hay"] :=         Lists:ReverseSort #["hay"].
#[3, 2, 1] :=       Lists:ReverseSort #[1, 2, 3].
#[3, 2, 1] :=       Lists:ReverseSort #[2, 3, 1].
#[3, 1, 1] :=       Lists:ReverseSort #[1, 3, 1].
#["z", "h", "b"] := Lists:ReverseSort #["h", "z", "b"].


{} :=              Tuples:Sort {}.
{"hay"} :=         Tuples:Sort {"hay"}.
{1, 2, 3} :=       Tuples:Sort {1, 2, 3}.
{1, 2, 3} :=       Tuples:Sort {2, 3, 1}.
{1, 1, 3} :=       Tuples:Sort {1, 3, 1}.
{"b", "h", "z"} := Tuples:Sort {"h", "z", "b"}.

{} :=              Tuples:ReverseSort {}.
{"hay"} :=         Tuples:ReverseSort {"hay"}.
{3, 2, 1} :=       Tuples:ReverseSort {1, 2, 3}.
{3, 2, 1} :=       Tuples:ReverseSort {2, 3, 1}.
{3, 1, 1} :=       Tuples:ReverseSort {1, 3, 1}.
{"z", "h", "b"} := Tuples:ReverseSort {"h", "z", "b"}.

LenCmp := [
  {L1, L2} := @.
  Len1 := Lists:Length L1.
  Len2 := Lists:Length L2.
  if Len1 = Len2
    then 0.
    else if Len1 > Len2
      then 1.
      else -1.
    end.
  end.
].
Reverse_LenCmp := [ -(LenCmp {Car @, Cdr @}).].


#[]                      := Lists:Sortwith {LenCmp, #[]}.
#[#[], #[]]              := Lists:Sortwith {LenCmp, #[#[], #[]]}.
#[#[], #["Hello"]]       := Lists:Sortwith {LenCmp, #[#[], #["Hello"]]}.
#[#[], #[92], #[-23, 4]] := Lists:Sortwith {LenCmp, #[#[-23, 4], #[], #[92]]}.

#[]                      := Lists:Sortwith {Reverse_LenCmp, #[]}.
#[#[], #[]]              := Lists:Sortwith {Reverse_LenCmp, #[#[], #[]]}.
#[#["Hello"], #[]]       := Lists:Sortwith {Reverse_LenCmp, #[#[], #["Hello"]]}.
#[#[-23, 4], #[92], #[]] := Lists:Sortwith {Reverse_LenCmp, #[#[-23, 4], #[], #[92]]}.


{}                      := Tuples:Sortwith {LenCmp, {}}.
{#[], #[]}              := Tuples:Sortwith {LenCmp, {#[], #[]}}.
{#[], #["Hello"]}       := Tuples:Sortwith {LenCmp, {#[], #["Hello"]}}.
{#[], #[92], #[-23, 4]} := Tuples:Sortwith {LenCmp, {#[-23, 4], #[], #[92]}}.

{}                      := Tuples:Sortwith {Reverse_LenCmp, {}}.
{#[], #[]}              := Tuples:Sortwith {Reverse_LenCmp, {#[], #[]}}.
{#["Hello"], #[]}       := Tuples:Sortwith {Reverse_LenCmp, {#[], #["Hello"]}}.
{#[-23, 4], #[92], #[]} := Tuples:Sortwith {Reverse_LenCmp, {#[-23, 4], #[], #[92]}}.


"
        Objects Tests:
".

Point := Objects:Create #[
  {x, 10},
  {y, 14},
  {sum, [
    {Self, _} := @.
    (Self x) + (Self y).
  ]}
].

10 := Point x.
14 := Point y.
24 := Point sum {}.

NewPoint := Point extend #[
  {x, 11},
  {z, 17},
  {newsum, [
    {Self, Arg} := @.
    (Self x) + (Self y) + (Self z) + Arg.
  ]}
].
11 := NewPoint x.
14 := NewPoint y.
17 := NewPoint z.
25 := NewPoint sum {}.
39 := NewPoint newsum (-3).


"
        Tuples Tests:
".

nil := Tuples:ToList {}.
#[1] := Tuples:ToList {1}.
#[1, 2, 3] := Tuples:ToList {1, 2, 3}.

omg  := Tuples:Nth {1, {omg, duh, hay}}.
duh  := Tuples:Nth {2, {omg, duh, hay}}.
hay  := Tuples:Nth {3, {omg, duh, hay}}.
ello := Tuples:Nth {1, {ello}}.

0 := Tuples:Length {}.
1 := Tuples:Length {one}.
2 := Tuples:Length {one, two}.

{}           := Tuples:Slice {1, 1, {}}.
{}           := Tuples:Slice {2, 2, {1,2,3,4}}.
{2, 3}       := Tuples:Slice {2, 4, {1,2,3,4}}.
{1, 2, 3}    := Tuples:Slice {1, 4, {1,2,3,4}}.
{1, 2, 3, 4} := Tuples:Slice {1, 5, {1,2,3,4}}.


"
        Strings Tests:
".

0  := Strings:Length "".
1  := Strings:Length "-".
12 := Strings:Length "Hello, world".

"h" := Strings:Nth {1, "hay!"}.
"a" := Strings:Nth {2, "hay!"}.
"y" := Strings:Nth {3, "hay!"}.
"!" := Strings:Nth {4, "hay!"}.

"hay!" := Strings:Lower "hay!".
"hay!" := Strings:Lower "Hay!".
"hay!" := Strings:Lower "HAY!".

"HAY!" := Strings:Upper "HAY!".
"HAY!" := Strings:Upper "hAY!".
"HAY!" := Strings:Upper "hay!".

8     := Strings:Find {"hello", "Hello, hello!"}.
1     := Strings:Find {"hello", "hello, hello!"}.
sorry := Strings:Find {"hello", "ello, hEllo!"}.
sorry := Strings:Find {"hello", ""}.


""     := Strings:Slice {1, 1, ""}.
""     := Strings:Slice {2, 2, "Hello"}.
"el"   := Strings:Slice {2, 4, "Hello"}.
"Hel"  := Strings:Slice {1, 4, "Hello"}.
"Hell" := Strings:Slice {1, 5, "Hello"}.

"" := Strings:Rstrip {"", ""}.
"" := Strings:Lstrip {"", ""}.
"" := Strings:Strip  {"", ""}.

" - hay" := Strings:Rstrip {" -", " - hay - "}.
"hay - " := Strings:Lstrip {" -", " - hay - "}.
"hay"    := Strings:Strip  {" -", " - hay - "}.

#[""]      := Strings:Split {", ", ""}.
#[",hay,"] := Strings:Split {", ", ",hay,"}.
#["hey ho", "lets go"] := Strings:Split {", ", "hey ho, lets go"}.
#["1", "2", "3", ""]   := Strings:Split {"|", "1|2|3|"}.

"\"\""     := Strings:Repr "".
"\"hay\""  := Strings:Repr "hay".
"\" \\n hay \\t \"" := Strings:Repr " \n hay \t ".
"\"\\\\\"" := Strings:Repr "\\".

"
        Funcs Tests:
".

sorry := Funcs:GetDocstring [hello. 21.].
"hay" := Funcs:GetDocstring ["hay". hello.].

"haya" := (Funcs:GetDocstring ~ Funcs:SetDocstring) {"haya", Lists:Map}.
nope   := Funcs:GetDocstring Lists:Map = "haya".

#[2,4,6] := Funcs:SetDocstring {"haya", Lists:Map} {[@*2.], #[1,2,3]}.


Pluser := [ {A1, A2, A3, A4} := @,
            A1 + A2 + A3 + A4. ].

Curried_Pluser := Funcs:Curry 4 Pluser.

7 := Pluser {3, 1, 2, 1}.
7 := Curried_Pluser 3 1 2 1.
"Hello" := Curried_Pluser "H" "e" "ll" "o".

Add10 := Curried_Pluser 1 3 6.
22 := Add10 12.

---------------------------------------
---------------------------------------
---------------------------------------
Io:Print "All library tests passed.\n".
---------------------------------------
---------------------------------------
---------------------------------------

