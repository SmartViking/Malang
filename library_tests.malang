"""
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
""".

nil := ToList {}.
#[] := nil.
{1, nil} := #[1].

#["one", 2] := #["one", 2].

#[] := #["hay" | E1 <- #[1,2], E2 <- #[]].
#[{1, one}, {1, two}] :=
    #[{N, M} | N <- #[1, 2],
               N < 2,
               M <- #[one, two]].

"""
        Bools Tests:
""".
false := Bools:Truthy {}.
false := Bools:Truthy 0.
false := Bools:Truthy false.
false := Bools:Truthy "".

true  := Bools:Truthy true.
true  := Bools:Truthy "true".
true  := Bools:Truthy 23.
true  := Bools:Truthy {false}.


true  := Bools:And {1, 2}.
true  := Bools:And {true, true}.

false := Bools:And {false, true}.
false := Bools:And {true,  false}.


true  := Bools:Or {"3", false}.
true  := Bools:Or {0, 1}.
false := Bools:Or {false, ""}.


true  := Bools:Xor {0, true}.
true  := Bools:Xor {true, false}.
false := Bools:Xor {true, true}.
false := Bools:Xor {0, 0}.

"""
        Lists Tests:
""".

L := #[1, two, "three"].

1 := Lists:Head L.
#[two, "three"] := Lists:Tail L.

#["three", two, 1] := Lists:Reverse L.
#[]    := Lists:Reverse #[].
#[elm] := Lists:Reverse #[elm].

Double := [ @ * 2. ].
Nums := #[1,2,3].

#[2, 4, 6] := Lists:Map {Double, Nums}.
#[] := Lists:Map {Double, nil}.

StrConcat := [{Acc, Elem} := @. Acc + Elem.].
"123" := Lists:Foldl {StrConcat, "", #["1", "2", "3"]}.
"321" := Lists:Foldr {StrConcat, "", #["1", "2", "3"]}.

"" := Lists:Foldl {StrConcat, "", nil}.
"" := Lists:Foldr {StrConcat, "", nil}.

0 := Lists:Length nil.
1 := Lists:Length #[one].
2 := Lists:Length #[one, two].

nil := Lists:Range {10, 10}.
#[10, 11, 12] := Lists:Range {10, 13}.

first  := Lists:Nth {1, #[first]}.
second := Lists:Nth {2, #[first, second]}.

#[1] := Lists:Concat {#[ ], #[1]}.
#[2] := Lists:Concat {#[2], #[ ]}.
#[1, 2, 3, 4] := Lists:Concat {#[1, 2], #[3, 4]}.


true  := Lists:Any {[@ == 2.], #[1, 2, 3]}.
false := Lists:Any {[@ == 2.], #[1, 3]}.

true  := Lists:Member {"str", #[one, 2, "str"]}.
false := Lists:Member {str,   #[one, 2, "Str"]}.

#[] := Lists:Repeat {0, hello}.
#[hello, hello, hello] := Lists:Repeat {3, hello}.

#[] := Lists:Remove #[hay].

Nums := #[1, 2, 3].
Nums := Lists:Remove {4, Nums}.
#[1, 3] := Lists:Remove {2, Nums}.

#[] := Lists:Filter {[@==5.], Nums}.
#[] := Lists:Filter {[@==5.], #[]}.
#[1, 2] := Lists:Filter {[@ <= 2.], Nums}.

#[] := Lists:Zip {#[], #[]}.
#[] := Lists:Zip {#[1,2,3], #[]}.
#[] := Lists:Zip {#[], #[1,2,3]}.
#[{1, one}, {2, two}] := Lists:Zip {#[1,2], #[one, two]}.
#[{1, one}] := Lists:Zip {#[1], #[one, two]}.
#[{1, one}] := Lists:Zip {#[1, 2], #[one]}.

#[] := Lists:Take {0, Nums}.
#[one] := Lists:Take {1, #[one, two, three]}.
#[one, two, three] := Lists:Take {50, #[one, two, three]}.

#[1,2,3] := Lists:Drop {0, Nums}.
#[2,3] := Lists:Drop {1, Nums}.
#[3]   := Lists:Drop {2, Nums}.
#[]    := Lists:Drop {3, Nums}.
#[]    := Lists:Drop {4, Nums}.

"""
        Dicts Tests:
""".

D := #[{one, 1}, {two, 2}, {"three", three}].
{ok, 1} := Dicts:Get {one, D}.
sorry   := Dicts:Get {four, D}.

true  := Dicts:Member {"three", D}.
false := Dicts:Member {four, D}.
false := Dicts:Member {2, D}.

true  := Dicts:Member {two,  Dicts:Remove {"three", D}}.
false := Dicts:Member {four, Dicts:Remove {two,     D}}.
false := Dicts:Member {one,  Dicts:Remove {one,     D}}.

true := Dicts:Member {4, Dicts:Set {4, four, D}}.
{ok, four} := Dicts:Get {4, Dicts:Set {4, four, D}}.

Vals := Dicts:Values D.
Keys := Dicts:Keys D.
false := Lists:Member {one, Vals}.
false := Lists:Member {three, Keys}.
true := Lists:Member {"three", Keys}.
true := Lists:Member {2, Vals}.
3 := Lists:Length Vals.
3 := Lists:Length Keys.



Print "All library tests passed.\n".