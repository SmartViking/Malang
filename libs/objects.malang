"
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
".

classified
exposing Create
where

Create := [
  "
  @ = Dict

  Create an object out of `Dict`. An object is just a function.

  You can \"send messages\" to it by calling it with a value;  
  If it is a special type of message, then the object does some special
  things, otherwise, it looks up the key in `Dict` which is equal to the
  message, and returns the corresponding value.

  In the special case that that corresponding value is a function or builtin, then it
  is called a method, and the response is not the actual method, but a new function
  that will call that method with a tuple of the form `{Self, Arg}`, where `Self` is
  the object itself that you can send messages to, and where `Arg` is the actual argument.

  `set`, `extend` and `show` are special messages.

  Even though you can extend an object with the `extend` message, there's no such
  thing as a parent object, all objects are flat, and attributes are simply overwritten.
  ".
  Attributes := Dicts:Extend @ #[
    {set, [
      {_, {K, V}}  := @.
      (Create ~ Dicts:Set K V) Attributes.
    ]},
    {extend, [
      {_, Newattrs} := @.
      Create (Dicts:Extend Attributes Newattrs).
    ]},
    {show, [
      Io:PrintLn "Object:".
      (Io:Print ~ Lists:Join)
        #[Strings:Fmt {"\t{1} -> {2}\n", K, V} | {K, V} <- Attributes],
      ok.
    ]}
  ].

  Self := [
    {ok, Val} := Dicts:Get @ Attributes,
    case TypeOf Val of
      "function" -> [Val {Self, @}.].
      "builtin"  -> [Val {Self, @}.].
      Else       -> Val.
    end.
  ].
].

endify.

--  Point := Create #[
--    {x, 10},
--    {y, 20},
--    {hello, [
--      Io:Print ("Hi there, " + (Cdr @) + "\n").
--    ]},
--    {tostr, [
--      {Self, _} := @.
--      Lists:Join #["x: ", (ToStr ~ Self) x, " y: ", (ToStr ~ Self) y].
--    ]}
--  ].
--  
--  Thing := Point extend #[
--    {z, 30},
--    {tostr, [
--      {S, _} := @.
--      Lists:Join #["x: ", (ToStr ~ S) x, " y: ", (ToStr ~ S) y, " z: ", (ToStr ~ S) z].
--    ]}
--  ].
