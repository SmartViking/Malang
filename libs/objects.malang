"
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
".

ModuleDoc :=
"
  Functions relating to objects. Objects are functions that you can send 'messages' to
  by calling them. Run `Help Objects:Create` for more info.
".

classified
exposing Create
where

Create := [
  "
  @ = Dict

  Create an object out of `Dict`. An object is just a function.

  You can \"send messages\" to it by calling it with a value. If it is a special type
  of message, then the object does some special things, otherwise, it looks up the key 
  in `Dict` which is equal to the message, and returns the corresponding value.

  In the special case that that corresponding value is a function or builtin, then it
  is called a method, and the response is not the actual function, but a new function
  that will call that method with a tuple of the form `{Self, Arg}`, where `Self` is
  the object itself that you can send messages to, and where `Arg` is the actual argument.

  `set`, `extend` and `show` are special messages, and are also methods.

  `set` is used to set an attribute to a new value, `extend` is used to do that for more
  than one attribute, and `show` will just print a representation of the object.

  Even though you can extend an object with the `extend` message, there's no such
  thing as a parent object, all objects are flat, and attributes are simply overwritten.

  Here's an example showing how objects can be used:

    Malang> Point := Objects:Create #[{x, 10}, {y, 14}].
    [function]
    Malang> Point show {}.
    Object:
    	show -> [function]
    	extend -> [function]
    	set -> [function]
    	x -> 10
    	y -> 14
    ok
    Malang> NewPoint := Point set {z, 4}.
    [function]
    Malang> NewPoint show {}.
    Object:
    	show -> [function]
    	extend -> [function]
    	set -> [function]
    	z -> 4
    	x -> 10
    	y -> 14
    ok
    Malang> NewNewPoint := Point extend #[{x, 666}, {hello, yoyo}].
    [function]
    Malang> NewNewPoint show {}.
    Object:
    	show -> [function]
    	extend -> [function]
    	set -> [function]
    	hello -> yoyo
    	x -> 666
    	y -> 14
    ok
    Malang> 

    It would probably be wise to read the source code for this function to gain a deeper understanding.
  ".
  Attributes := Dicts:Extend @ #[
    {set, [
      {_, {K, V}}  := @.
      (Create ~ Dicts:Set K V) Attributes.
    ]},
    {extend, [
      {_, Newattrs} := @.
      Create (Dicts:Extend Attributes Newattrs).
    ]},
    {show, [
      Io:PrintLn "Object:".
      (Io:Print ~ Lists:Join)
        #[Strings:Fmt {"\t{1} -> {2}\n", K, V} | {K, V} <- Attributes],
      ok.
    ]}
  ].

  Self := [
    {ok, Val} := Dicts:Get @ Attributes,
    case TypeOf Val of
      "function" -> [Val {Self, @}.].
      "builtin"  -> [Val {Self, @}.].
      Else       -> Val.
    end.
  ].
].

endify.
