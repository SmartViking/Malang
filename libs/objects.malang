"""
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
""".

Create := [
  """
  @ = Dict

  Create an object out of `Dict`. An object is just a function.

  You can \"send messages\" to it by calling it with a value;  
  If it is a special type of message, then the object does some special
  things, otherwise, it looks up the key in `Dict` which is equal to the
  message, and returns the corresponding value.

  In the special case that that corresponding value is a function or builtin, then it
  is called a method, and the response is not the actual method, but a new function
  that will call that method with a tuple of the form `{Self, Arg}`, where `Self` is
  the object itself that you can send messages to, and where `Arg` is the actual argument.
  """.
  Attrs := @.

  Self := [
    case @ of
      {set, K, V} -> Create (Dicts:Set {K, V, Attrs}).
      show ->
        Io:Print "Object:\n",
        #[(Io:Print ~ Lists:Join)
            #["  ", ToStr At, " -> ",
              (ToStr ~ Lists:Tail ~ Dicts:Get) {At, Attrs},
              "\n"] | At <- Dicts:Keys Attrs],
        ok.
      Attr -> 
        {ok, Val} := Dicts:Get {Attr, Attrs},
        case Builtins:TypeOf Val of
          "function" -> [Val {Self, @}.].
          "builtin"  -> [Val {Self, @}.].
          Else -> Val.
        end.
    end.
  ].
].


Point := Create #[
  {x, 10},
  {y, 20},
  {hello, [
    Io:Print ("Hi there, " + Lists:Tail @ + "\n").
  ]},
  {tostr, [
    {Self, _} := @.
    Lists:Join #["x: ", (ToStr ~ Self) x, " y: ", (ToStr ~ Self) y].
  ]}
].

-- (PrintLn ~ Point tostr) {}.