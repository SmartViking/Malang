"
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
".

ModuleDoc :=
"
  Functions related to streams. Streams are like 'lazy' lists, and they can conceptually
  be infinite, which makes streams an interesting abstraction. A stream can take two forms:

  (1) The atom `empty`, the value of the empty stream. Analogous to the empty list for lists.
  (2) A function that will either return `empty`, or a tuple of the form {Val, NextStream}, where
      `Val` is a new item in the stream, and `NextStream` is the 'tail' of the stream.

  Notice that the function can return 'empty' and that's still a valid stream. That's mildly annoying,
  so if you have a stream and want the next element, you can use `Streams:Next`, which takes care of
  both cases where the stream is empty.
".

classified
exposing Next
         MakeStream
         Map
         ToList
         Take
         Takewhile
         Drop
         Dropwhile
         Zipwith
         Zip
         Chain
         Interleave
         Cons
         Filter
where

Next := [
  "
  @ = Stream
  
  Returns `empty` if `Stream` is empty, else returns a tuple of the form
  `{Val, NewStream}` where `Val` is a new item taken from the stream, and where
  `NewStream` is the rest of the stream.
  ".
  if @ = empty then empty. else @ {}. end.
].

MakeStream := Funcs:Curry 2 [
  "
  @ = Seed Func
  
  Create a new stream. The first item in the stream, lets call it `Item_1`,
  will be `Func Seed`. The next item will be `Func Item_1`. And so on, forever.
  
  If `Func` returns `empty` at any point then the stream will end.
  ".
  {Seed, Func} := @.
  
  [
    NewVal := Func Seed.
    if NewVal = empty
      then empty.
      else {NewVal, MakeStream NewVal Func}.
    end.
  ].
].

Map := Funcs:Curry 2 [
  "
  @ = Func Stream
  
  Return a new version of `Stream` where `Func` is called
  on all items.
  ".
  {Func, Stream} := @.
  
  [
    case Next Stream of
      empty               -> empty.
      {NewVal, NewStream} -> {Func NewVal, Map Func NewStream}.
    end.
  ].
].

ToList := [
  "
  @ = Stream
  
  Converts `Stream` to a list.
  ".
  Helper := [
    {Stream, Acc} := @.
    case Next Stream of
      empty -> Acc.
      {Val, NewStream} -> Helper {NewStream, Val::Acc}.
    end.
  ].
  Lists:Reverse ~ Helper $ {@, #[]}.
].

Take := Funcs:Curry 2 [
  "
  @ = N Stream
  
  Returns a new version of `Stream` that has maximum `N` items.
  ".
  {N, Stream} := @.
  
  [
    if N <= 0
      then empty.
      else case Next Stream of
           empty            -> empty.
           {Val, NewStream} -> {Val, Take (N-1) NewStream}.
      end.
    end.
  ].
].

Takewhile := Funcs:Curry 2 [
  "
  @ = Pred Stream
  
  Returns a new version of `Stream` that stops once the function `Pred`
  returns falsy for an item (and doesn't include that item).
  ".
  {Pred, Stream} := @.
  
  [
    case Next Stream of
      empty -> empty.
      {Val, NewStream} ->
        if Pred Val
          then {Val, Takewhile Pred NewStream}.
          else empty.
        end.
    end.
  ].
].


Drop := Funcs:Curry 2 [
  "
  @ = N Stream
  
  Returns a new version of `Stream` where `N` items are 'forgotten'.
  ".
  {N, Stream} := @.
  
  Helper := [
    {Current_Stream, Current_N} := @.
    if Current_N <= 0
      then Next Current_Stream.
      else case Next Current_Stream of
           empty          -> empty.
           {_, NewStream} -> Helper {NewStream, Current_N-1}.
      end.
    end.
  ].
  
  [Helper {Stream, N}.].
].


Dropwhile := Funcs:Curry 2 [
  "
  @ = Pred Stream
  
  Returns a new version of `Stream` with items dropped off
  from the front as long as `Pred` is truthy for those items.
  ".
  {Pred, Stream} := @.
  
  Helper := [
    case Next @ of
      empty -> empty.
      {Val, NewStream} ->
        if Pred Val
          then Helper NewStream.
          else {Val, NewStream}.
        end.
    end.
  ].
  
  [Helper Stream.].
].


Zipwith := Funcs:Curry 3 [
  "
  @ = Func Stream1 Stream2
  
  Return a new stream where `Stream1` and `Stream2` are 'zipped' together
  with `Func`, which is called with an argument of the form `{Item1, Item2}`
  where `Item1` is an item from `Stream1` and `Item2` is the corresponding item
  in `Stream2`. If either `Stream1` or `Stream2` becomes empty, then the whole
  zipped stream becomes empty.
  ".
  {Func, Stream1, Stream2} := @.
  
  [
    case {Next Stream1, Next Stream2} of
      {empty, _} -> empty.
      {_, empty} -> empty.
      {{Val1, NewStream1}, {Val2, NewStream2}} ->
        {Func {Val1, Val2}, Zipwith Func NewStream1 NewStream2}.
    end.
  ].
].

Zip := Funcs:Curry 2 [
  "
  @ = Stream1 Stream2
  
  Return a new stream of tuples of the form `{Item1, Item2}` where
  `Item1` is an item from `Stream1` and `Item2` is the corresponding
  item in `Stream2`. If either `Stream1` or `Stream2` becomes empty,
  then the whole zipped stream becomes empty.
  ".
  {Stream1, Stream2} := @.
  Zipwith [@.] Stream1 Stream2.
].

Chain := Funcs:Curry 2 [
  "
  @ = Stream1 Stream2
  
  Create a new stream that will milk items from `Stream1` until it is
  exhausted, then it moves on to `Stream2`. This function only makes
  sense when `Stream1` is finite, obviously.
  ".
  
  {Stream1, Stream2} := @.
  
  [
    case Next Stream1 of
      empty -> Next Stream2.
      {Val, NewStream} -> {Val, Chain NewStream Stream2}.
    end.
  ].
].

Interleave := Funcs:Curry 2 [
  "
  @ = Stream1 Stream2
  
  Returns a new stream that alternates between `Stream1` and `Stream2`,
  so it takes one item from `Stream1`, then one from `Stream2` then one
  from `Stream1` and so on. This stream ends as soon as one of the streams
  ends.
  ".
  
  {Stream1, Stream2} := @.
  
  [
    case Next Stream1 of
      empty -> empty.
      {Val, NewStream} -> {Val, Interleave Stream2 NewStream}.
    end.
  ].
].

Cons := Funcs:Curry 2 [
  "
  @ = Item Stream
  
  Return a stream where the \"head\" is `Item` and the \"tail\" is `Stream`.
  ".
  
  {Item, Stream} := @.
  
  [{Item, Stream}.].
].

Filter := Funcs:Curry 2 [
  "
  @ = Pred Stream
  
  Return a new version of `Stream` where only items that passes the predicate
  function `Pred` are present.
  ".
  {Pred, Stream} := @.
  
  Next_Valid := [
    case Next @ of
      empty -> empty.
      {Val, NewStream} ->
        if Pred Val
          then {Val, NewStream}.
          else Next_Valid NewStream.
        end.
    end.
  ].
  
  [
    case Next_Valid Stream of
      empty -> empty.
      {Val, NewStream} ->
        {Val, Filter Pred NewStream}.
    end.
  ].
].

endify.