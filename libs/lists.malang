"""
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
""".

Reverse := [
  Helper := [
    {List, Acc} := @.
    case List of
      nil -> Acc.
      {H, T} -> Helper {T, {H, Acc}}.
    end.
  ].
  Helper {@, nil}.
].

Head := [
  {H, T} := @, H.
].

Tail := [
  {H, T} := @, T.
].

Map := [
  {Func, List} := @.
  Helper := [
    {L, Acc} := @.
    case L of
      nil -> Acc.
      {H, T} -> Helper {T, {Func H, Acc}}.
    end.
  ].
  Reverse (Helper {List, nil}).
].

Foldl := [
  case @ of
    {F, Acc, nil}    -> Acc.
    {F, Acc, {H, T}} -> Foldl {F, F {Acc, H}, T}.
  end.
].

Foldr := [
  case @ of
    {F, Acc, nil}    -> Acc.
    {F, Acc, {H, T}} -> F {Foldr {F, Acc, T}, H}.
  end.
].

Length := [
  Foldl {[{Acc, _} := @, Acc+1.], 0, @}.
].


Range := [
  {From, To} := @.
  Helper := [
    {N, Acc} := @.
    case N <= From of
      true  -> {N, Acc}.
      false -> Helper {N-1, {N, Acc}}.
    end.
  ].
  case To <= From of
    true  -> nil.
    false -> Helper {To-1, nil}.
  end.
].

Nth := [
  {N, {H, T}} := @.
  case N <= 1 of
    true  -> H.
    false -> Nth {N-1, T}.
  end.
].

Random_Choice := [
  Nth {Builtins:Random_Range {1, Length @ + 1}
      , @}.
].

Concat := [
  {L1, L2} := @.
  Helper := [
    {Elems_Left, Result} := @.
    case Elems_Left of
      nil    -> Result.
      {H, T} -> Helper {T, {H, Result}}.
    end.
  ].
  Helper {Reverse L1, L2}.
].

Any := [
  {Func, List} := @.
  case List of
    nil    -> false.
    {H, T} ->
      case Bools:Truthy (Func H) of
        true  -> true.
        false -> Any {Func, T}.
      end.
  end.
].

Member := [
  {Val, List} := @.
  Any {[@ == Val.], List}.
].

Repeat := [
  {Times, Elem} := @.
  Helper := [
    {TimesLeft, Acc} := @.
    case TimesLeft <= 0 of
      true  -> Acc.
      false -> Helper {TimesLeft-1, {Elem, Acc}}.
    end.
  ].
  Helper {Times, nil}.
].

Remove := [
  {Elem, List} := @.
  Helper := [
    {Current, Acc} := @.
    case Current of
      nil -> Acc.
      {Elem,  T} -> Helper {T, Acc}.
      {Other, T} -> Helper {T, {Other, Acc}}.
    end.
  ].
  Reverse (Helper {List, nil}).
].

Filter := [
  {F, List} := @.
  Helper := [
    {Current, Acc} := @.
    case Current of
      nil -> Acc.
      {H, T} ->
        case Bools:Truthy (F H) of
          true  -> Helper {T, {H, Acc}}.
          false -> Helper {T, Acc}.
        end.
    end.
  ].
  Reverse (Helper {List, nil}).
].