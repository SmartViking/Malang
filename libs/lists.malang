"
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
".

ModuleDoc :=
"
  Functions for manipulating lists.
".

classified
exposing Joinwith            Member?
         Join                Repeat
         Reverse             Filter
         Map                 Zip
         Reduce              Zipwith
         Length              PartitionAt
         Range               Take
         Nth                 Drop
         RandomChoice        Takewhile
         Concat              Dropwhile
         Any?                ToTuple
         All?                Sortwith
         And?                Sort
         Or?                 ReverseSort
         Min                 Slice
         Max                 ToStream
         Remove
where

Joinwith := Funcs:Curry 2 [
  "
  @ = Str List

  Return a str which is the string representation of all the elements of `List`
  separated by `Str` concatenated.
  ".
  {Str, List} := @.
  Helper := [
    {Current, Acc} := @.
    case Current of
      #[]  -> Acc.
      H::T -> Helper {T, Acc + Str + ToStr H}.
    end.
  ].
  case List of
    #[]  -> "".
    H::T -> Helper {T, ToStr H}.
  end.
].

Join :=  [
  "
  @ = List

  Return a str which is the string representation of all the elements of `List`
  concatenated.
  ".
  Joinwith "" @.
].

Reverse := [
  "
  @ = List

  Return `List` in reverse order.
  ".
  Helper := [
    {List, Acc} := @.
    case List of
      #[]  -> Acc.
      H::T -> Helper {T, H::Acc}.
    end.
  ].
  Helper {@, #[]}.
].


Map := Funcs:Curry 2 [
  "
  @ = Func List

  Applies `Func` to every elemement of `List` and returns the result.
  ".
  {Func, List} := @.
  #[Func E | E <- List].
].

Reduce := Funcs:Curry 3 [
  "
  @ = Func Seed List

  Reduce `List` to a single value, by combining the elements with the function `Func`.
  

  Func is called with the argument `{Acc, Elem}`, where `Acc` us the accumulated answer
  and `Elem` is the current element of the list being reduced.
  
  `Acc` will be `Seed` and `Elem` will be the head of the list the first time `Func` is called,
  then it will continue reducing towards the end of the list.
  ".
  case @ of
    {F, Acc, #[]}  -> Acc.
    {F, Acc, H::T} -> Reduce F (F {Acc, H}) T.
  end.
].


Length := [
  "
  @ = List

  Returns the length of `List`.
  ".
  Reduce [{Acc, _} := @, Acc+1.] 0 @.
].


Range := Funcs:Curry 2 [
  "
  @ = From To

  Returns a list of integers ranging from `From` (inclusive), to `To` (exclusive).
  ".
  {From, To} := @.
  Helper := [
    {N, Acc} := @.
    if N <= From
      then N::Acc.
      else Helper {N-1, N::Acc}.
    end.
  ].
  if To <= From
    then #[].
    else Helper {To-1, #[]}.
  end.
].

Nth := Funcs:Curry 2 [
  "
  @ = N List

  Returns the Nth element of `List`. The list must
  be long enough.
  ".
  {N, H::T} := @.
  if N <= 1
    then H.
    else Nth (N-1) T.
  end.
].

RandomChoice := [
  "
  @ = List

  Returns a random element of `List`.
  ".
  Nth (Numbers:RandRange 1 $ Length @ + 1) @.
].

Concat := Funcs:Curry 2 [
  "
  @ = List1 List2

  Concatenates two lists.
  ".
  {L1, L2} := @.
  Helper := [
    {Elems_Left, Result} := @.
    case Elems_Left of
      #[]  -> Result.
      H::T -> Helper {T, H::Result}.
    end.
  ].
  Helper {Reverse L1, L2}.
].

Any? := Funcs:Curry 2 [
  "
  @ = Func List

  Returns `yeah` if any of the elements of `List` pass the predicate function `Func`.
  ".
  {Func, List} := @.
  case List of
    #[]  -> nope.
    H::T -> if Func H then yeah. else Any? Func T. end.
  end.
].


All? := Funcs:Curry 2 [
  "
  @ = Func List

  Returns `yeah` if all the elements of `List` pass the predicate function `Func`.
  ".
  {Func, List} := @.
  case List of
    #[]  -> yeah.
    H::T -> if Func H then All? Func T. else nope. end.
  end.
].


And? := [
  "
  @ = List

  Returns `yeah` if all of the elements of `List` are truthy, `nope` otherwise.
  ".
  case @ of
    #[]  -> yeah.
    H::T -> if H then And? T. else nope. end.
  end.
].

Or? := [
  "
  @ = List

  Returns `yeah` if any of the elements of `List` are truthy, `nope` otherwise.
  ".
  case @ of
    #[]  -> nope.
    H::T -> if H then yeah. else Or? T. end.
  end.
].


Member? := Funcs:Curry 2 [
  "
  @ = Val List

  Returns `yeah` if `Val` is a member of the `List`, `nope` otherwise.
  ".
  {Val, List} := @.
  Any? [@ = Val.] List.
].

Repeat := Funcs:Curry 2 [
  "
  @ = N Elem

  Return a list of `N` `Elem`s.
  ".
  {Times, Elem} := @.
  Helper := [
    {TimesLeft, Acc} := @.
    if TimesLeft <= 0
      then Acc.
      else Helper {TimesLeft-1, Elem::Acc}.
    end.
  ].
  Helper {Times, #[]}.
].

Remove := Funcs:Curry 2 [
  "
  @ = Elem List

  Return a list with all elements that are equal to `Elem` removed.
  ".
  {Elem, List} := @.
  #[E | E <- List, E != Elem].
].

Filter := Funcs:Curry 2 [
  "
  @ = Func List

  Return a list only with elements that pass the predicate function `Func`.
  ".
  {F, List} := @.
  #[E | E <- List, F E].
].


Zip := Funcs:Curry 2 [
  "
  @ = List1 List2

  Zip two lists together. Returns a list of tuples.
  ".
  {List1, List2} := @.
  Zipwith [@.] List1 List2.
].

Zipwith := Funcs:Curry 3 [
  "
  @ = Func List1 List2

  Zip two lists together using the function `Func`.

  `Func` is called with the argument `{Elem1, Elem2}`, where `Elem1`
  is an element from `List1`, and `Elem2` is the corresponding element
  from `List2`.
  ".
  {F, L1, L2} := @.
  Helper := [
    case @ of
      {#[], _, Acc}         -> Acc.
      {_, #[], Acc}         -> Acc.
      {H1::T1, H2::T2, Acc} -> Helper {T1, T2, (F {H1, H2})::Acc}.
    end.
  ].
  Reverse (Helper {L1, L2, #[]}).].

PartitionAt := Funcs:Curry 2 [
  "
  @ = N List

  Return a tuple of the form `{Seen, Unseen}`
  where `Seen` are elements before and including the `N`th element
  of `List`, and `Unseen` are the rest. `Seen` IS REVERSED. The reason
  `Seen` is reversed is that I want to implement other functions in terms
  of this function (namely `Take` and `Drop`),  and don't want unnecessary overhead.
  ".
  {N, List} := @.
  Helper := [
    case @ of
      {_, #[],    Seen}  -> {Seen, #[]}.
      {0, Unseen, Seen}  -> {Seen, Unseen}.
      {Left, H::T, Seen} ->
        Helper {Left-1, T, H::Seen}.
    end.
  ].
  if N > 0
    then Helper {N, List, #[]}.
    else {#[], List}.
  end.
].

Take := Funcs:Curry 2 [
  "
  @ = N List

  Return the first `N` elements of `List`.
  ".
  {N, List} := @.
  {Seen, _} := PartitionAt N List.
  Reverse Seen.
].

Drop := Funcs:Curry 2 [
  "
  @ = N  List

  Drop the first `N` element off of `List`, and return the resulting list.
  ".
  {N, List} := @.
  {_, Unseen} := PartitionAt N List.
  Unseen.
].


Takewhile := Funcs:Curry 2 [
  "
  @ = Func List

  Takes elements from `List` as long as they pass the predicate
  function `Func`, and returns the resulting list.

  It stops taking elements as soon as an element doesn't pass the
  predicate function `Func`.
  ".
  {F, List} := @.
  Helper := [
    case @ of
      {#[],  Acc} -> Acc.
      {H::T, Acc} ->
        if F H
          then Helper {T, H::Acc}.
          else Acc.
        end.
    end.
  ].
  Reverse $ Helper {List, #[]}.
].

Dropwhile := Funcs:Curry 2 [
  "
  @ = Func List

  Drops elements from `List` as long as they pass the predicate
  function `Func`, and returns the resulting list.

  It stops dropping elements as soon as an element doesn't pass the
  predicate function `Func`.
  ".
  case @ of
    {_, #[]}  -> #[].
    {F, H::T} ->
      if F H
        then Dropwhile F T.
        else H::T.
      end.
  end.
].


ToTuple := [
  "
  @ = List

  Convert `List` into a tuple.
  ".
  
  Helper := [
    case @ of
      {#[],  Acc} -> Acc.
      {H::T, Acc} -> Helper {T, Acc + {H}}.
    end.
  ].

  Helper {@, {}}.
].

ToStream := [
  "
  @ = List

  Convert `List` into a stream.
  ".
  List := @.
  [
    case List of
      #[]  -> empty.
      H::T -> {H, ToStream T}.
    end.
  ].
].

Sortwith := Funcs:Curry 2 [
  "
  @ = Func List

  Sort `List` with the comparison function `Func`.

  `Func` should take an argument of the form `{Val_1, Val_2}`, and return
  `0` if they should be considered equal, `1` if `Val_1` should be
  considered 'higher', and `-1` if `Val_1` should be considered 'lower'.
  'higher' values goes to the end of the new list, 'lower' values go to
  the beginning.
  ".
  {Func, List} := @.
  Tuples:ToList ~ Tuples:Sortwith Func ~ ToTuple $ List.
].

Sort := [
  "
  @ = List

  Return a new version of `List`, sorted from low to high.
  ".
  Tuples:ToList ~ Tuples:Sort ~ ToTuple $ @.
].

ReverseSort := [
  "
  @ = List

  Return a new version of `List`, sorted from high to low.
  ".
  Tuples:ToList ~ Tuples:ReverseSort ~ ToTuple $ @.
].

Slice := Funcs:Curry 3 [
  "
  @ = Start Stop List
    
  Returns a sublist of `List` starting at index `Start` (inclusive),
  ending at index `Stop` (exclusive).
  ".
  {Start, Stop, List} := @.
  Take (Stop-Start) ~ Drop (Start-1) $ List.
].

Max := [
  "
  @ = List

  Returns the biggest element in `List`.
  ".
  case @ of
    #[]  -> Error "Max called with empty list".
    H::T -> Reduce [
        {Acc, Elem} := @.
        if Acc > Elem
          then Acc.
          else Elem. 
        end.
      ] H T.
  end.
].

Min := [
  "
  @ = List

  Returns the smallest element in `List`.
  ".
  case @ of
    #[]  -> Error "Min called with empty list".
    H::T -> Reduce [
        {Acc, Elem} := @.
        if Acc < Elem
          then Acc.
          else Elem. 
        end.
      ] H T.
  end.
].


endify.