"
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
".

ModuleDoc :=
"
  Functions related to functions.
".

classified
exposing Curry
         GetFilename
         SetFilename
         GetDocstring
         SetDocstring
         Partial
         Callable?
where

Curry := [

  _Curry := [
    "
    @ = NumArgs Func

    Transform the function `Func` (which must be a function taking as argument
    a tuple of length `NumArgs`) into a \"chain\" of functions, each taking one
    argument, and at the end of that chain is the function which will call `Func`
    with the accumulated arguments.
    
    The function returned will have the same docstring and filename as `Func`, so if
    someone uses `Help` on that function, then it will show the same docstring, 
    and report that it was defined where `Func` was defined.

    This function was called on itself to create a curried version of itself. Neat. 
    ".
    {N, Func} := @.
    
    Helper := [
      ArgsLeft := @.
      case ArgsLeft of
        1 -> [Func @.].
        _ -> Next := Helper $ ArgsLeft-1,
             [Tuple := @. [NewArg := @. Next $ Tuple + {NewArg}.].].
      end.
    ].

    -- 
    -- The output of `Helper` is a function `F0` taking a tuple as an argument.
    -- That tuple is the accumulated arguments to `Func`.
    -- The output of `F0` is either:
    -- 
    -- (1) The result of calling `Func` with `F0`s argument (a tuple).
    -- (2) A function `F1` of one argument, which will remember in its closure
    --     the tuple passed to `F0`, and when called will create a new tuple 
    --     of its argument together with `F0`s argument and call `Next` with
    --     that argument, where `Next` is the result of a recursive call to
    --     `Helper`, and should be a function taking as argument a tuple, just
    --     like `F0`.
    -- 

    if N < 1
      then Error "NumArgs must be at least 1".
      else Result := Helper N,
           Curried := [Result {@}.],
           NewFunc := case Builtins:FuncsGetDocstring Func of
             nope -> Curried.
             Doc  -> Builtins:FuncsSetDocstring {Doc, Curried}.
           end,
           case TypeOf Func of
             "builtin"  -> NewFunc.
             "function" -> Builtins:FuncsSetFilename {Builtins:FuncsGetFilename Func, NewFunc}.
           end.
    end.
  ].

  _Curry {2, _Curry}.
] {}.

GetFilename  := Builtins:FuncsGetFilename.
SetFilename  := Curry 2 Builtins:FuncsSetFilename.
GetDocstring := Builtins:FuncsGetDocstring.
SetDocstring := Curry 2 Builtins:FuncsSetDocstring.


Partial := Curry 2 [
  "
  @ = Args Func

  Returns a new function `F0` that will call `Func` with
  `Args + NewArgs` where `NewArgs` is the argument passed to `F0`.
  So `Args` and `NewArgs` could be tuples (tuples can be concatenated
  with `+`) or something else, like numbers.
  ".
  {Args, Func} := @.
  [Func $ Args + @.].
].

Callable? := [
  "
  @ = Thing

  Returns `yeah` if `Thing` is of the type `function` or the type `builtin`, in
  which case it can be called with a value, and `false` otherwise.
  ".
  Lists:Member? (TypeOf @) #["function", "builtin"].
].

endify.