"""
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
""".

Get := [
  """
  @ = {Key, Dict}

  Finds the first `{K, V}` pair where `K` == `Key` in the list `Dict` and returns
  `{ok, V}` if the search is successful, and `sorry` otherwise.
  """.
  {Key, D} := @.
  case D of
    #[]           -> sorry.
    {{Key, V}, T} -> {ok, V}.
    {{K,   V}, T} -> Get {Key, T}.
  end.
].

Remove := [
  """
  @ = {Key, Dict}

  Return a new `Dict` with all `{K, V}` pairs where `K` == `Key` removed.
  """.
  {Key, D} := @.
  #[{K, V} | {K, V} <- D, K != Key].
].

Set := [
  """
  @ = {Key, Val, Dict}

  Return a new `Dict` with the pair `{Key, Val}` inserted, and all `{K, V}` pairs
  where `K` == `Key` removed.
  """.
  {K, V, D} := @.
  {{K, V}, Remove {K, D}}.
].

Member := [
  """
  @ = {Key, Dict}

  Returns `true` if there exists a `{K, V}` pair in `Dict` where `K` == `Key`.
  """.
  {Key, Dict} := @.
  Lists:Any {
    [{K, _} := @, K == Key.]
    , Dict }.
].

Keys := [
  """
  @ = Dict

  Returns a list of all the keys in Dict.
  """.
  Lists:Map {
    [{K, V} := @, K.]
    , @}.
].

Values := [
  """
  @ = Dict

  Returns a list of all the values in Dict.
  """.
  Lists:Map {
    [{K, V} := @, V.]
    , @}.
].