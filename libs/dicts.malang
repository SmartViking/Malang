"
Copyright (C) 2014 Mattias Ugelvik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
".

classified
exposing Get
         Remove
         Set
         Member?
         Keys
         Values
         Extend
where

Get := Funcs:Curry 2 [
  "
  @ = Key Dict

  Finds the first `{K, V}` pair where `K` = `Key` in the list `Dict` and returns
  `{ok, V}` if the search is successful, and `nope` otherwise.
  ".
  {Key, D} := @.
  case D of
    #[]           -> nope.
    {{Key, V}, T} -> {ok, V}.
    {{K,   V}, T} -> Get Key T.
  end.
].

Remove := Funcs:Curry 2 [
  "
  @ = Key Dict

  Return a new `Dict` with all `{K, V}` pairs where `K` = `Key` removed.
  ".
  {Key, D} := @.
  #[{K, V} | {K, V} <- D, K != Key].
].

Set := Funcs:Curry 3 [
  "
  @ = Key Val Dict

  Return a new `Dict` with the pair `{Key, Val}` inserted, and all `{K, V}` pairs
  where `K` = `Key` removed. So it's obviously not constant time.
  ".
  {K, V, D} := @.
  {{K, V}, Remove K D}.
].

Member? := Funcs:Curry 2 [
  "
  @ = Key Dict

  Returns `true` if there exists a `{K, V}` pair in `Dict` where `K` = `Key`.
  ".
  {Key, Dict} := @.
  Lists:Any? [{K, _} := @, K = Key.] Dict.
].

Keys := [
  "
  @ = Dict

  Returns a list of all the keys in Dict.
  ".
  #[K | {K, V} <- @].
].

Values := [
  "
  @ = Dict

  Returns a list of all the values in Dict.
  ".
  #[V | {K, V} <- @].
].

Extend := Funcs:Curry 2 [
  "
  @ = Old New

  Return a version of `Old` where every `{K, V}` pair in `New` is present,
  overwriting any old values.
  ".
  {Old, New} := @.

  case New of
    nil -> Old.
    {{K, V}, Tail} -> Extend (Set K V Old) Tail.
  end.
].

endify.